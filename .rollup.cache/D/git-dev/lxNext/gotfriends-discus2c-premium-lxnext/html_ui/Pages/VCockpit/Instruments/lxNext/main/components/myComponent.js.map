{"version":3,"file":"myComponent.js","sourceRoot":"","sources":["../../../../../../../../src/main/components/myComponent.tsx"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,gBAAgB,EAAiD,eAAe,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAW7I,MAAM,OAAO,WAAY,SAAQ,gBAAkC;IAMjE,YAAY,KAAuB;QACjC,KAAK,CAAC,KAAK,CAAC,CAAC;QAJP,SAAI,GAAG,OAAO,CAAC,MAAM,CAAS,KAAK,CAAC,CAAC;QAC5B,eAAU,GAAG,WAAW,CAAC,SAAS,EAAkB,CAAC;QAKpE,MAAM,UAAU,GAAG,KAAK,CAAC,GAAG,CAAC,aAAa,EAAY,CAAC;QACvD,MAAM,QAAQ,GAAG,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QACrE,MAAM,QAAQ,GAAG,UAAU,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,WAAW,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE;YACxE,IAAG,EAAE,IAAI,QAAQ,EAAE,CAAC;gBAClB,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC5C,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC9C,CAAC;QACH,CAAC,CAAC,CAAC;QAGH,IAAI,CAAC,KAAK,GAAG,eAAe,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IACnD,CAAC;IAEM,MAAM;QACX,OAAO,CACL,oCAAK,GAAG,EAAE,IAAI,CAAC,UAAU,EAAE,KAAK,EAAC,cAAc;YAAE,IAAI,CAAC,KAAK;;YAAG,IAAI,CAAC,IAAI,CAAO,CAC/E,CAAC;IACJ,CAAC;IAEM,aAAa,CAAC,IAAW;QAC9B,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAE1B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;YACxB,IAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;gBACpC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAClD,CAAC;iBAAM,CAAC;gBACN,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACrD,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { FSComponent, DisplayComponent, VNode, ComponentProps, Subscribable, EventBus, ConsumerSubject, Subject } from '@microsoft/msfs-sdk';\r\nimport { Units, FSEvents } from '../vars';\r\n\r\ninterface MyComponentProps extends ComponentProps {\r\n  bus: EventBus,\r\n  variable: any,\r\n  unittype: any,\r\n  threshold: number\r\n}\r\n\r\n\r\nexport class MyComponent extends DisplayComponent<MyComponentProps> {\r\n\r\n  private readonly value: Subscribable<number>;\r\n  private unit = Subject.create<string>('kph');\r\n  private readonly elementRef = FSComponent.createRef<HTMLDivElement>();\r\n\r\n  constructor(props: MyComponentProps) {\r\n    super(props);\r\n  \r\n    const subscriber = props.bus.getSubscriber<FSEvents>();\r\n    const consumer = subscriber.on(this.props.variable).withPrecision(0);\r\n    const unittype = subscriber.on('masterunits').whenChanged().handle((mu) => {\r\n      if(mu == \"metric\") {\r\n        this.unit.set(this.props.unittype.metric);\r\n      } else {\r\n        this.unit.set(this.props.unittype.imperial);  \r\n      }\r\n    });\r\n  \r\n  \r\n    this.value = ConsumerSubject.create(consumer, 0);\r\n  }\r\n\r\n  public render(): VNode {\r\n    return (\r\n      <div ref={this.elementRef} class='my-component'>{this.value} {this.unit}</div>\r\n    );\r\n  }\r\n\r\n  public onAfterRender(node: VNode): void {\r\n    super.onAfterRender(node);\r\n  \r\n    this.value.sub(airspeed => {\r\n      if (airspeed < this.props.threshold) {\r\n        this.elementRef.instance.classList.add('alert');\r\n      } else {\r\n        this.elementRef.instance.classList.remove('alert');\r\n      }\r\n    });\r\n  }\r\n}"]}